---
version: '3'

tasks:
  valheim:
    vars:
      pubkey:
        sh: grep public talos/data/age.txt | cut -d' ' -f4
    cmds:
      - |
        kubectl create secret generic restic-config --dry-run=client -o yaml \
          --from-literal=RESTIC_REPOSITORY=s3:$(yq -r '.backups.endpoint_vh' secrets.yaml)/valheim \
          --from-literal=RESTIC_PASSWORD=$(yq -r '.backups.sk' secrets.yaml) \
          --from-literal=AWS_ACCESS_KEY_ID=$(yq -r '.backups.ak' secrets.yaml) \
          --from-literal=AWS_SECRET_ACCESS_KEY=$(yq -r '.backups.sk' secrets.yaml) | \
          sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/valheim/valheim/restic.sops.yaml
  generate:
    vars:
      pubkey:
        sh: grep public talos/data/age.txt | cut -d' ' -f4
    cmds:
      - kubectl create secret generic -n certs rndc-key -o yaml --dry-run=client --from-literal=rndc-key=$(yq -r '.rndc_key' secrets.yaml) | sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/certs/issuers/rndc-key.sops.yaml
      - gomplate -d secrets.yaml -f templates/cert-manager/issuer.yaml.template | sops -a {{.pubkey}} -e --encrypted-regex '^(nameserver|email)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/certs/issuers/issuer.sops.yaml
      - gomplate -d secrets.yaml -f templates/cert-manager/http-issuer.yaml.template | sops -a {{.pubkey}} -e --encrypted-regex '^(email)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/certs/issuers/http-issuer.sops.yaml
      - gomplate -d secrets.yaml -f templates/cert-manager/http-issuer-nginx.yaml.template | sops -a {{.pubkey}} -e --encrypted-regex '^(email)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/certs/issuers/http-issuer-nginx.sops.yaml
      - |
        kubectl create secret generic lldap-secrets --dry-run=client -o yaml \
          --from-literal=lldap-jwt-secret=$(pwgen -s 40 -1 -y -B) \
          --from-literal=lldap-bind-dn=cn=admin,ou=people,dc=tremoureux,dc=fr \
          --from-literal=lldap-bind-password=$(pwgen -s 40 -1 -y -B) \
          --from-literal=lldap-base-dn=dc=tremoureux,dc=fr | \
          sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/auth/lldap/secrets.sops.yaml
      - |
        openssl genrsa -out auth.rsa 4096
        kubectl create secret generic authelia-secrets --dry-run=client -o yaml \
          --from-literal=authelia-storage-password=$(pwgen -s 96 -1) \
          --from-literal=authelia-redis-password=$(pwgen -s 96 -1) \
          --from-literal=authelia-jwt-token=$(pwgen -s 128 -1) \
          --from-literal=authelia-session-encryption-key=$(pwgen -s 128 -1) \
          --from-literal=authelia-storage-encryption-key=$(pwgen -s 128 -1) \
          --from-literal=authelia-oidc-hmac-secret=$(pwgen -s 32 -1) \
          --from-literal=authelia-notifier-smtp-password=$(yq -r '.sw_sk' secrets.yaml) \
          --from-file=authelia-oidc-hmac-private-key=auth.rsa |
          sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/auth/authelia/secrets.sops.yaml
        rm auth.rsa
      - |
        gomplate -d secrets.yaml -f templates/auth/configuration.oidc.yaml.template | \
        kubectl create secret generic authelia-oidc --dry-run=client -o yaml --from-file=configuration.oidc.yaml=/dev/stdin | \
        sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/auth/authelia/configuration.oidc.sops.yaml
      - |
        gomplate -d secrets.yaml -f templates/auth/configuration.smtp.yaml.template | \
        kubectl create secret generic authelia-smtp --dry-run=client -o yaml --from-file=configuration.smtp.yaml=/dev/stdin | \
        sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/auth/authelia/configuration.smtp.sops.yaml
      - |
        kubectl create secret generic grafana-secrets --dry-run=client -o yaml \
          --from-literal=auth_url=https://auth.home.tremoureux.fr/api/oidc/authorization \
          --from-literal=token_url=https://auth.home.tremoureux.fr/api/oidc/token \
          --from-literal=api_url=https://auth.home.tremoureux.fr/api/oidc/userinfo \
          --from-literal=grafana_id=grafana \
          --from-literal=grafana_secret=$(yq -r '.oidc.grafana' secrets.yaml) | \
          sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/monitoring/grafana/oidc.sops.yaml
      - |
        kubectl create secret generic vaultwarden-secrets --dry-run=client -o yaml \
          --from-literal=oidc_url=https://auth.home.tremoureux.fr \
          --from-literal=oidc_id=vaultwarden \
          --from-literal=oidc_secret=$(yq -r '.oidc.vaultwarden' secrets.yaml) | \
          sops -a {{.pubkey}} -e --encrypted-regex '^(data|stringData)$' --input-type=yaml --output-type=yaml /dev/stdin > k8s/apps/passwords/vaultwarden/oidc.sops.yaml
