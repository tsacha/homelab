---
- name: Setup hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: systemd

# Free up port 53
- name: Disable DNS stub listener
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: 'DNSStubListener='
    line: DNSStubListener=no
  notify: Restart systemd-resolved

- meta: flush_handlers

- name: Gateway directory
  ansible.builtin.file:
    path: /opt/gateway
    state: directory

- name: Docker compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /opt/gateway/docker-compose.yml

- name: Systemd unit
  ansible.builtin.template:
    src: unit.j2
    dest: /etc/systemd/system/gateway.service

- name: Certbot OVH credentials
  ansible.builtin.template:
    src: certbot-ovh-credentials.ini.j2
    dest: /opt/gateway/certbot-ovh-credentials.ini
    mode: 0400

### HTTP 2136 configuration
- name: HTTP2136 certificate renew service
  ansible.builtin.template:
    src: renew.service
    dest: /etc/systemd/system/renew.service

- name: HTTP2136 certificate renew timer
  ansible.builtin.template:
    src: renew.timer
    dest: /etc/systemd/system/renew.timer

- name: Caddyfile vhost
  ansible.builtin.template:
    src: Caddyfile.j2
    dest: /opt/gateway/Caddyfile

- name: Check if HTTP2136 certificate exists
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ http2136_vhost }}/fullchain.pem"
  register: result

- name: Generate HTTP2136 certificate
  ansible.builtin.docker_container:
    name: certbot-http2136
    image: certbot/dns-ovh
    state: started
    recreate: yes
    detach: no
    cleanup: yes
    volumes:
      - /opt/gateway:/opt/gateway
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    command: "certonly --dns-ovh --dns-ovh-credentials /opt/gateway/certbot-ovh-credentials.ini -d {{ http2136_vhost }} -m {{ mail }} --non-interactive --agree-to"
  when: not result.stat.exists

- name: Renew certificates daily
  ansible.builtin.systemd_service:
    name: renew.timer
    state: started
    enabled: true
    daemon_reload: true

- name: HTTP2136 environment file
  ansible.builtin.copy:
    mode: 0440
    content: |
      TOKEN={{ http2136_token }}
    dest: /opt/gateway/.env

### Bind configuration
- name: Zone file
  ansible.builtin.template:
    src: zone.j2
    dest: "/opt/gateway/{{ zone }}"
  notify: Restart DNS
  tags: dns-restart

- meta: flush_handlers
  tags: dns-restart

- name: DNS configuration
  ansible.builtin.template:
    src: named.conf.j2
    dest: "/opt/gateway/named.conf"

- name: DNS RNDC key
  ansible.builtin.template:
    src: rndc.key.j2
    dest: "/opt/gateway/rndc.key"

### Wireguard configuration
- name: Wireguard public key
  ansible.builtin.template:
    src: wireguard-pubkey.key.j2
    dest: "/opt/gateway/wireguard-pubkey.key"

- name: Wireguard private key
  ansible.builtin.template:
    src: wireguard-privkey.key.j2
    dest: "/opt/gateway/wireguard-privkey.key"

- name: Wireguard configuration
  ansible.builtin.template:
    src: wireguard.conf.j2
    dest: "/opt/gateway/wireguard.conf"

# Bitwarden
- name: Check if Bitwarden certificate exists
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ bitwarden_vhost }}/fullchain.pem
  register: result

- name: Generate Bitwarden certificate
  ansible.builtin.docker_container:
    name: certbot-bitwarden
    image: certbot/dns-ovh
    state: started
    recreate: yes
    detach: no
    cleanup: yes
    volumes:
      - /opt/gateway:/opt/gateway
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    command: "certonly --dns-ovh --dns-ovh-credentials /opt/gateway/certbot-ovh-credentials.ini -d {{ bitwarden_vhost }} -m {{ mail }} --non-interactive --agree-to"
  when: not result.stat.exists

- name: Bitwarden backup service
  ansible.builtin.template:
    src: backup.service.j2
    dest: /etc/systemd/system/backup.service

- name: Bitwarden backup timer
  ansible.builtin.template:
    src: backup.timer
    dest: /etc/systemd/system/backup.timer

- name: Start Bitwarden backup timer
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: backup.timer

# Start Gateway
- name: Start gateway
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: gateway
